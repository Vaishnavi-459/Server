import{r as F,_ as L,t as o,a as n,c as R,P as l,q as t,F as T,J as j,M as A,K as D,B as c,L as U,O as V,S as I}from"./index-CcJbILmu.js";import{b as u}from"./CFormInput-DhVpOeCy.js";var v=F.forwardRef(function(e,s){var a,g=e.children,y=e.className,S=e.feedback,h=e.feedbackInvalid,k=e.feedbackValid,$=e.floatingClassName,C=e.floatingLabel,E=e.htmlSize,i=e.id,d=e.invalid,N=e.label,p=e.options,b=e.size,w=e.text,x=e.tooltipFeedback,f=e.valid,m=L(e,["children","className","feedback","feedbackInvalid","feedbackValid","floatingClassName","floatingLabel","htmlSize","id","invalid","label","options","size","text","tooltipFeedback","valid"]);return o.createElement(u,{describedby:m["aria-describedby"],feedback:S,feedbackInvalid:h,feedbackValid:k,floatingClassName:$,floatingLabel:C,id:i,invalid:d,label:N,text:w,tooltipFeedback:x,valid:f},o.createElement("select",n({id:i,className:R("form-select",(a={},a["form-select-".concat(b)]=b,a["is-invalid"]=d,a["is-valid"]=f,a),y),size:E},m,{ref:s}),p?p.map(function(r,z){return o.createElement("option",n({},typeof r=="object"&&r.disabled&&{disabled:r.disabled},typeof r=="object"&&r.value!==void 0&&{value:r.value},{key:z}),typeof r=="string"?r:r.label)}):g))});v.propTypes=n({className:l.string,htmlSize:l.number,options:l.array},u.propTypes);v.displayName="CFormSelect";const M=async()=>{try{const e=await t.get(`${T}/${j}`);return console.log("Service response:",e.data),e.data}catch(e){if(e.response&&e.response.status===404)return console.log("Service response:",e.response.data),e.response.data;throw console.error("Unexpected error:",e.message||e),e}},q=async()=>{try{return(await t.get(`${A}/${D}`)).data}catch(e){throw console.error("Error fetching service data:",e.message),e.response&&(console.error("Error Response Data:",e.response.data),console.error("Error Response Status:",e.response.status)),e}},J=async(e,s)=>{console.log("Sending data to id:",s);try{return console.log("Sending data to API:",e),await t.post(`${c}/${U}/${s}`,e,{headers:{"Content-Type":"application/json"}})}catch(a){console.error("Error response:",a.response),alert(`Error: ${a.response.status} - ${a.response.data.message||a.response.statusText}`)}},K=async(e,s)=>{console.log(e,s);try{const a=await t.put(`${c}/${V}/${e}`,s,{headers:{"Content-Type":"application/json"}});return console.log("Service updated successfully:",a.data),a.data}catch(a){throw console.error("Error updating service:",a),a}},O=async(e,s)=>{try{console.log("Service name:",e);const a=await t.delete(`${c}/${I}/${s}/${e}`);return console.log("Service deleted successfully:",a.data),a.data}catch(a){throw a}};export{v as C,q as a,O as d,J as p,M as s,K as u};
